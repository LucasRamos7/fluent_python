>> Overview of Built-In Sequences
    A container sequence (list, tuple, collections.deque) holds references to the objects it contains.
    A flat sequence (str, bytes, array.array) stores the value of its contents in its own memory space, not as distinct
        Python objects.
        The Python array is a single object, holding a C language array.
        Flat sequences are more compact, but are limited to holding primitive machine values like bytes, integers and
            floats.

>> Tuples as Immutable lists
    A tuple uses less memory than a list of the same length, and it allows Python to do some optimizations.
    To evaluate a tuple literal, the Python compiler generates bytecode for a tuple constant in one operation; for a
        list literal, the generated bytecode pushes each element as a separate constant to the data stack, and then
        builds the list.
    Given a tuple t, tuple(t) returns a reference to the same t; given a list l, list(l) must create a new copy of l.
    Because of its fixed length, a tuple instance if allocated the exact memory space that it needs, while a list is
        allocated with room to spare, to amortize the cost of future appends.

>> Pattern matching with sequences
    A sequence pattern matches the subject if
        1. The subject is a sequence and
        2. The subject and the pattern have the same number of items and
        3. Each corresponding item matches, including nested items
    Unlike unpacking, patterns don't destructure sequences that are not iterables (like iterators)
    Type information can be added to a pattern, similarly to a cast for the item